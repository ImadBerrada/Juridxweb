// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  consultations Consultation[]
  blogPosts     BlogPost[]

  @@map("users")
}

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  company   String?
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  featured    Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  consultations Consultation[]

  @@map("services")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  company   String?
  content   String
  rating    Int      @default(5)
  featured  Boolean  @default(false)
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  tags        String   // JSON string of tags array
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blog_posts")
}

model Consultation {
  id          String   @id @default(cuid())
  clientId    String?
  serviceId   String?
  firstName   String
  lastName    String
  email       String
  phone       String?
  company     String?
  description String
  preferredDate DateTime?
  status      ConsultationStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client  User?    @relation(fields: [clientId], references: [id], onDelete: SetNull)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@map("consultations")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter")
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  SettingType @default(STRING)

  @@map("settings")
}

// Enums
enum Role {
  ADMIN
  CLIENT
}

enum ContactStatus {
  PENDING
  CONTACTED
  RESOLVED
  ARCHIVED
}

enum ConsultationStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}
